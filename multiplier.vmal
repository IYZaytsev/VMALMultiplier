
#two number being multiplied  
A: 1010101010;
B: 2121212121;
4: 0b10000000000000000000000000000000;

#stores result
C: 0b0000;
D: 0b0000;

#Value used to check Least significant digit
F: 0b0001;


#used to tell where zeros and ones are in B
LBL bitMask;
# Copies F to Register E
MV E,F;

#Does and on Register E and B (E is a copy of F) Saves value to register E
AND E,B;

#Does a left Shift on F
LS F,F;


#Flag is set to E to make jump to zeroBit or notZeroBit
SF E;
BIZ zeroBit;
Go notZeroBit;


#has two possible outcomes bit is zero or bit is not zero 
#If last bit of c is 1 extra instructions for shift from C to D
LBL zeroBit;
MV E,C;
AND E,6;
SF E;

BIZ zeroBitLastDigitZero;
RS C,C;
RS D,D;
ADD D,4;

# sets the flags based on the value of F (Z and N)
SF F;
BIZ endProgram;
Go bitMask;

#If last bit of C is zero No extra instructions for shift from C to D  
LBL zeroBitLastDigitZero;
RS C,C;
RS D,D;
# sets the flags based on the value of F (Z and N)
SF F;
BIZ endProgram;
Go bitMask;


#has two possible outcomes bit is zero or bit is not zero 
LBL notZeroBit;
ADD C,A;
MV E,C;
AND E,6;
SF E;
BIZ notZeroBitLastDigitZero;
RS C,C;
RS D,D;
ADD D,4;
# sets the flags based on the value of F (Z and N)
SF F;
BIZ endProgram;
Go bitMask;

#If last bit of C is zero
LBL notZeroBitLastDigitZero;
RS C,C;
RS D,D;
# sets the flags based on the value of F (Z and N)
SF F;
BIZ endProgram;
Go bitMask;


#Goes here to end program 
LBL endProgram;